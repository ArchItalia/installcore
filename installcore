#!/usr/bin/bash
# installcore
# author Jonathan Sanfilippo 

version="1.7"

main_color="#5e81ac"
warning_color="#bf616a"

export BORDER_FOREGROUND="$main_color"
export GUM_CONFIRM_SELECTED_BACKGROUND="$main_color"
export GUM_CHOOSE_CURSOR_FOREGROUND="$main_color"
export GUM_CHOOSE_SELECTED_FOREGROUND="$main_color"
export GUM_INPUT_CURSOR_FOREGROUND="$main_color"
export GUM_FILTER_INDICATOR_FOREGROUND="$main_color"
export FOREGROUND="#d8dee9"
export BACKGROUND="#2e3440"
export DISABLED_FOREGROUND="#4c566a"
export SELECTED_BACKGROUND="#434c5e"
export HEADER_FOREGROUND="#eceff4"
export SUCCESS_COLOR="#a3be8c"
export INFO_COLOR="#88c0d0"
export WARNING_COLOR="$warning_color"
export LINK_COLOR="#8fbcbb"
export CODE_COLOR="#ebcb8b"
export QUOTE_COLOR="#b48ead"





Welcome() {
    gum confirm "$(gum style --border normal --margin '1' --padding '1 2' "$(gum style --foreground "$main_color" '  
    
        /@@@@@/             @@@@@,         @@@,   @@@@@     (@@@@@@/         
    @@@@@@@@@@@@@*      @@@@@@@@@@@       @@@@@@@@@@@,  @@@@@@@@@@@@@#      
  @@@@@@     @@@      @@@@@@,  @@@@@@     @@@@@@      &@@@@       %@@@@     
 @@@@@             &@@@@@@       @@@@@@   @@@@        @@@@@@@@@@@@@@@@@     
 @@@@@           @@@@@@(          @@@@@@  @@@@        @@@@&&&&&&&&&&&&#     
 &@@@@@       %@@@@@@  @@@@     @@@@@@,   @@@@        @@@@@                 
   @@@@@@@@@@@@@@@%    @@@@@@@@@@@@@      @@@@         @@@@@@     #@@@      
     &@@@@@@@@@@         *@@@@@@@(        @@@@           @@@@@@@@@@@@&  
     
     ')" "" "Welcome to InstallCore" "$(gum style --foreground "#b48ead" "InstallCore version: $version")" "$(gum style --foreground "#81a1c1" "Developed by Jonathan Sanfilippo, Klod Cripta.")" "$(gum style --foreground "#ebcb8b" "Warning, Internet connection required..")")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        echo "Exiting. Have a good day!"
        exit
    fi
}

Timezone() {
    timezone=$(timedatectl list-timezones | gum filter --placeholder "select a timezone")
    
}

Keymap() {
    keymap=$(localectl list-keymaps | gum filter --placeholder "select a keymap")
}

Locale() {
    locale=$(cat /etc/core/locales | gum filter --placeholder "select a locale")
}

Username() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "You can type your name and surname in uppercase or lowercase" "your name will be considered for the home." "$(gum style --foreground "#ebcb8b" "Please enter your realname")"
    name=$(gum input --placeholder "Please enter your name")
    username=$(echo "$name" | cut -d' ' -f1 | tr '[:upper:]' '[:lower:]')
    realname="$name"
}

# Password Function
Password() {
    matches="false"
    passwrong="false"
    while [[ "$matches" == "false" ]]; do
        clear
        if [[ "$passwrong" == "true" ]]; then
            gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the password again" 
        else
            gum style --border normal --margin "1" --padding "1 2" "Now enter your password"
        fi
        password=$(gum input --password --placeholder "Please enter a password")
        clear
        gum style --border normal --margin "1" --padding "1 2" "Verify your password"
        password_verif=$(gum input --password --placeholder "Type your password again")
        if [[ "$password" == "$password_verif" ]]; then
            matches="true"
        else
            passwrong="true"
        fi
    done
    length=1000
    key=$(openssl rand -base64 $((length * 2)) | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1)
    crypt_password=$(echo "$password" | openssl enc -e -aes256 -base64 -k "$key")
    #crypt_password="$password"
}

# RootPassword Function
RootPassword() {
    clear
    different_root_password=true
    gum confirm "$(gum style --border normal --margin '1' --padding '1 2' 'Use same password for root?')" && different_root_password=false
    if [[ $different_root_password != "true" ]]; then
        root_password=$password # set root password same as user password
    else
        root_matches="false"
        root_passwrong="false"
        while [[ "$root_matches" == "false" ]]; do
            clear
            if [[ "$root_passwrong" == "true" ]]; then
                gum style --border normal --margin "1" --padding "1 2" "Passwords did not match, please type the root password again"
            else
                gum style --border normal --margin "1" --padding "1 2" "Now enter your root password"
            fi
            root_password=$(gum input --password --placeholder "Please enter a root password")
            clear
            gum style --border normal --margin "1" --padding "1 2" "Verify your root password"
            root_password_verif=$(gum input --password --placeholder "Type your root password again")
            if [[ "$root_password" == "$root_password_verif" ]]; then
                root_matches="true"
            else
                root_passwrong="true"
            fi
        done
    fi
    crypt_root_password=$(echo $root_password | openssl enc -e -aes256 -base64 -k "$key")
    #crypt_root_password="$root_password"
}


Shell() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "The base shell in Core Linux is $(gum style --foreground "#a3be8c" bash)" "Other variants are available." "$(gum style --foreground "#ebcb8b" "Select a default shell.")"
    shell=$(gum choose --limit 1 bash zsh fish)

  
}

AURhelper() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "AUR is a community driven repository by Arch users." "The AUR Helper automates various tasks as searching for packages." "$(gum style --foreground "#ebcb8b" "Select a default AUR Helper.")"
    helper=$(gum choose --limit 1 yay paru aura pikaur )

  
}

Firewall() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Firewalls create a barrier between a trusted network" "and an untrusted network" "$(gum style --foreground "#ebcb8b" "Select a default Firewall.")"
    fwll=$(gum choose --limit 1 "No firewall" firewalld ufw iptables )

  
}

Kernel() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Core Linux is based on the Kernel: $(gum style --foreground "#a3be8c" linux)" "There are various alternative Linux kernels available." "$(gum style --foreground "#ebcb8b" "Select a default Kernel.")"
    kernel=$(gum choose --limit 1 linux linux-lts linux-zen linux-hardened linux-rt linux-rt-lts)
    
}

Hostname() {
   clear
   gum style --border normal --margin "1" --padding "1 2" "Generated hostname for core" "$(gum style --foreground "#ebcb8b" "Press enter to continue or type and change machine name")"
   default_hostname="core-$(printf '%s' $(echo "$RANDOM" | md5sum) | cut -c 1-6)"
   read -p "Hostname $(gum style --foreground "#b48ead" "$default_hostname"): " hostname
   hostname=${hostname:-$default_hostname}
}

Disk() {
    clear
    gum style --border normal --margin "1" --padding "1 2" "Set the size of the root, the remaining space will be dedicated to home." "$(gum style --foreground "#ebcb8b" "Please select the disk to install to")" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk!')"
    disk_dev=$(lsblk -pdo name | grep -v zram | grep -v NAME | grep -v loop | grep -v sr | gum choose --limit 1)
    disk=$(echo $disk_dev | awk '{ print substr ($0, 6 ) }')
    default_root=$(lsblk -b -n -o SIZE /dev/$disk | awk 'NR==1{size=int($1/1048576); printf "%d", size}')
    read -p "$(gum style --foreground "#81a1c1" " $disk size: $default_root MB.") Enter root size [MB]: " root
    root=${root:-}
    home=$(expr $default_root - $root)
    root1=$(echo "scale=2; $root/1024" | bc)
    home1=$(echo "scale=2; $home/1024" | bc)
    root2=${root1%.*} # rimuove la parte decimale
    home2=${home1%.*} # rimuove la parte decimale
    GB="GB" 
}


Swap(){
    clear
    gum style --border normal --margin "1" --padding "1 2" "Swap is a specific area of memory used by an operating system" "to store temporary data that cannot be held in main memory (RAM)." "$(gum style --foreground "#ebcb8b" "Please set zram size for swap.")"
    ram=$(free -m | awk '/^Mem:/{print int($2/1024 + 0.5) }')
    read -p "$(gum style --foreground "#b48ead" " RAM size: $ram GB") Set zram size [GB]: " zram
    zram=${zram:-$ram}

}


UEFICheck() {
    is_uefi=$([ -d /sys/firmware/efi ] && echo true || echo false)
    if [[ $is_uefi == "true" ]]; then
        grub_type="grub-efi"
        grub_location="/boot/efi"
        efiboot="1"
        mode="UEFI"
    else
        grub_type="grub-legacy"
        grub_location="$disk_dev"
        efiboot="none"
        mode="Bios/mbr"
    fi
}

Reflector() {
    country=$(cat /etc/core/country | gum filter --placeholder "select a mirrorlist country")
}




# $(gum style --foreground "#d8dee9" "") testo bianco
# $(gum style --foreground "#a3be8c" "") testo colorato verde
# 
#

Summary() {
    clear
    CONTINUE=false
    gum confirm "$(gum style --border normal --margin '1' --padding '1 2' "Summary, is this correct?" "" "$(gum style --foreground "#ebcb8b" "keymap: ")$(gum style --foreground "#d8dee9" "$keymap ")$(gum style --foreground "#ebcb8b" "timezone: ")$(gum style --foreground "#d8dee9" "$timezone ")$(gum style --foreground "#ebcb8b" "locale: ")$(gum style --foreground "#d8dee9" "$locale")" "$(gum style --foreground "#a3be8c" "Username: ")$(gum style --foreground "#d8dee9" "$username ")$(gum style --foreground "#a3be8c" "Realname: ")$(gum style --foreground "#d8dee9" "$realname ")" "$(gum style --foreground "#d08770" "User Password: ")$(gum style --foreground "#d8dee9" "$password ")$(gum style --foreground "#d08770" "Root Password: ")$(gum style --foreground "#d8dee9" "$root_password")" "$(gum style --foreground "#b48ead" "hostname: ")$(gum style --foreground "#d8dee9" "$hostname ")$(gum style --foreground "#b48ead" "Kernel: ")$(gum style --foreground "#d8dee9" "$kernel ")" "$(gum style --foreground "#8fbcbb" "Mode: ")$(gum style --foreground "#d8dee9" "$mode ")$(gum style --foreground "#8fbcbb" "Device: ")$(gum style --foreground "#d8dee9" "/dev/$disk ")$(gum style --foreground "#8fbcbb" "FS: ")$(gum style --foreground "#d8dee9" "BTRFS ")"  "$(gum style --foreground "#8fbcbb" "boot: ")$(gum style --foreground "#d8dee9" "$efiboot$GB ")$(gum style --foreground "#8fbcbb" "root: ")$(gum style --foreground "#d8dee9" "$root2$GB ")$(gum style --foreground "#8fbcbb" "home: ")$(gum style --foreground "#d8dee9" "$home2$GB ")$(gum style --foreground "#8fbcbb" "zram: ")$(gum style --foreground "#d8dee9" "$zram$GB")" "$(gum style --foreground "#81a1c1" "firewall: ")$(gum style --foreground "#d8dee9" "$fwll ")$(gum style --foreground "#81a1c1" "shell: ")$(gum style --foreground "#d8dee9" "$shell ")$(gum style --foreground "#81a1c1" "AUR: ")$(gum style --foreground "#d8dee9" "$helper ")" "$(gum style --foreground "#5e81ac" "mirrorlist: ")$(gum style --foreground "#d8dee9" "$country ")$(gum style --foreground "#5e81ac" "DE: ")$(gum style --foreground "#d8dee9" "Gnome minimal")")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        Change
    else
        # Remove config.json if it exists
        if [[ $(ls | grep "/tmp/config.json") ]]; then
            rm /tmp/config.json
        fi
        # Make config.json
        echo "{
        \"partition\": {
            \"device\": \"$disk\",
            \"root\": \"$root\",
            \"zram\": \"$zram\",
            \"mode\": \"Auto\",
            \"efi\": $is_uefi,
            \"partitions\": []
        },
        \"bootloader\": {
            \"type\": \"$grub_type\",
            \"location\": \"$grub_location\"
        },
        \"locale\": {
            \"locale\": [
                \"$locale\"
            ],
            \"keymap\": \"$keymap\",
            \"timezone\": \"$timezone\",
            \"reflector\": \"$country\"
        },
        \"networking\": {
            \"hostname\": \"$hostname\"
        },
        \"users\": [
            {
                \"name\": \"$username\",
                \"rname\": \"$realname\",
                \"userpass\": \"$crypt_password\",
                \"key\": \"$key\",
                \"hasroot\": true,
                \"shell\": \"$shell\",
                \"helper\": \"$helper\",
                \"fwll\": \"$fwll\",
                \"kernel\": \"$kernel\"
            }
        ],
        \"rootpass\": \"$crypt_root_password\",
        \"x\": \"x\"
    }" > /tmp/config.json
    fi
}

Change() {
    gum style --border normal --margin '1' --padding '1 2' "What do you want to change?"
    $(gum choose --limit 1 Timezone Keymap Locale Username Password RootPassword Shell AURhelper Firewall Kernel Hostname Disk Reflector )
    Summary
}

Install() {
    CONTINUE=false
    gum confirm "$(gum style --border normal --margin '1' --padding '1 2' "Are you sure you want to install?" "$(gum style --foreground "$warning_color" 'WARNING: This will erease the whole disk')")" && CONTINUE=true
    if [[ $CONTINUE != "true" ]]; then
        echo "Exiting. Have a good day!"
        exit
    else
        sudo inc1
    fi
}




Welcome
Timezone
Keymap
Locale
Username
Password
RootPassword
Shell
Hostname
Disk
Swap 
Reflector
UEFICheck
AURhelper
Firewall
Kernel
Summary
Install
