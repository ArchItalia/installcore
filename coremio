#!/usr/bin/bash

# Leggi il file JSON in una variabile
json=$(cat "/tmp/config.json")

# Crea le variabili leggendo dal JSON
partition_device=$(echo "$json" | jq -r '.partition.device')
partition_efi=$(echo "$json" | jq -r '.partition.efi')
root=$(echo "$json" | jq -r '.partition.root')
locale_locale=$(echo "$json" | jq -r '.locale.locale[0]')
locale_keymap=$(echo "$json" | jq -r '.locale.keymap')
locale_timezone=$(echo "$json" | jq -r '.locale.timezone')
country=$(echo "$json" | jq -r '.locale.reflector')
networking_hostname=$(echo "$json" | jq -r '.networking.hostname')
user_name=$(echo "$json" | jq -r '.users[0].name')
real_name=$(echo "$json" | jq -r '.users[0].rname')
user_password=$(echo "$json" | jq -r '.users[0].userpass')
user_shell=$(echo "$json" | jq -r '.users[0].shell')
root_password=$(echo "$json" | jq -r '.rootpass')
zr=$(echo "$json" | jq -r '.partition.zram')
zram="${zr}G"
kernel=$(echo "$json" | jq -r '.kernel')
key=$(echo "$json" | jq -r '.users[0].key')
pacstrap="base base-devel $kernel linux-firmware intel-ucode btrfs-progs"
core="core-base architalia-fonts core-gtk-theme core-gnome-backgrounds core-icons-theme core-keyring core-extensions-base core-terminal-nord-theme"
de="xorg gnome-shell gnome-control-center gnome-keyring gnome-terminal gnome-text-editor gnome-shell-extensions xdg-user-dirs-gtk xdg-user-dirs gvfs gdm nautilus"
base="networkmanager wpa_supplicant wireless_tools netctl net-tools iw cups alsa-utils pipewire-pulse mtools dosfstools exfatprogs fuse firewalld acpi cronie git wget reflector bluez bluez-utils"
generic="gnome-shell-extension-desktop-icons-ng firefox yay timeshift extension-manager evince eog gparted gsmartcontrol mpv gnome-calculator gnome-clocks gnome-calendar htop gnome-system-monitor vim nano"
services="gdm NetworkManager firewalld bluetooth cronie reflector cups"




    uefi(){
   
        sgdisk --zap-all "/dev/$partition_device"
        parted -s "/dev/$partition_device" mklabel gpt
        parted -s "/dev/$partition_device" mkpart primary fat32 1MiB 1GiB
        parted -s "/dev/$partition_device" set 1 esp on
        parted -s "/dev/$partition_device" mkpart primary btrfs 1GiB "${root}M"
        parted -s "/dev/$partition_device" mkpart primary btrfs "${root}M" 100%
        
        mkfs.fat -F32 "/dev/$partition_device"1
        mkfs.btrfs -f "/dev/$partition_device"2
        mkfs.btrfs -f "/dev/$partition_device"3
        
        mount "/dev/$partition_device"2 /mnt           
        btrfs su cr /mnt/@  
        umount /mnt 
        mount "/dev/$partition_device"3 /mnt
        btrfs su cr /mnt/@home  
        
        umount /mnt
        mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@ "/dev/$partition_device"2 /mnt
        mkdir /mnt/home
        mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@home "/dev/$partition_device"3 /mnt/home
        mkdir /mnt/boot
        mount "/dev/$partition_device"1 /mnt/boot
    }    

    legacy(){
        
        sgdisk --zap-all "/dev/$partition_device"
        parted -s "/dev/$partition_device" mklabel msdos
        parted -s "/dev/$partition_device" mkpart primary btrfs 1MiB "${root}M"
        parted -s "/dev/$partition_device" mkpart primary btrfs "${root}M" 100%
        
        mkfs.btrfs -f "/dev/$partition_device"1
        mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@ "/dev/$partition_device"1 /mnt
        mkdir /mnt/home

        mkfs.btrfs -f "/dev/$partition_device"2
        mount -o noatime,ssd,space_cache=v2,compress=zstd,discard=async,subvol=@home "/dev/$partition_device"2 /mnt/home
    }    


    base(){

        reflector --verbose -c $country -a 6 --sort rate --save /etc/pacman.d/mirrorlist
        pacstrap -K /mnt $pacstrap
        genfstab -U /mnt > /mnt/etc/fstab
        
        arch-chroot /mnt /bin/bash -c "locale-gen $locale_locale && echo LANG=$locale_locale > /etc/locale.conf && echo KEYMAP=$locale_keymap > /etc/vconsole.conf && ln -sf /usr/share/zoneinfo/$locale_timezone /etc/localtime"
        echo "$networking_hostname" > /mnt/etc/hostname
        

        # Impostare la password di root
        decrypted2=$(echo "$root_password" | openssl enc -d -aes256 -base64 -k "$key")
        arch-chroot /mnt /bin/bash -c "echo root:$decrypted2 | chpasswd"

        # Creare un utente regolare
        arch-chroot /mnt /bin/bash -c "pacman -Sy $user_shell --noconfirm" 
        arch-chroot /mnt /bin/bash -c "useradd -m -s /bin/$user_shell $user_name"
        arch-chroot /mnt /bin/bash -c "usermod -aG wheel $user_name"
        arch-chroot /mnt /bin/bash -c "usermod -c '$real_name' $user_name"
        chown -R $user_name:$user_name /mnt/home/$user_name
        chmod -R 755 /mnt/home/$user_name
        
        # Impostare la password dell'utente regolare
        decrypted=$(echo "$user_password" | openssl enc -d -aes256 -base64 -k "$key")
        arch-chroot /mnt /bin/bash -c "echo $user_name:$decrypted| chpasswd"
        
        # crea profilo sudoers.d
        arch-chroot /mnt /bin/bash -c "echo '$user_name ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/$user_name"
        
        # Impostare la password di root
        decrypted2=$(echo "$root_password" | openssl enc -d -aes256 -base64 -k "$key")
        arch-chroot /mnt /bin/bash -c "echo root:$decrypted2 | chpasswd"

         # Abilita e configura zram
        zrfstb="/dev/zram0 none swap defaults,pri=100 0 0 "
        zrx='ACTION=="add", KERNEL=="zram0", ATTR{comp_algorithm}="zstd", ATTR{disksize}="'$zram'", RUN="/usr/bin/mkswap -U clear /dev/%k" , TAG+="systemd"' 
        arch-chroot /mnt /bin/bash -c  "echo 'zram' > /etc/modules-load.d/zram.conf"
        arch-chroot /mnt /bin/bash -c  "echo $zrx > /etc/udev/rules.d/99-zram.rules"
        arch-chroot /mnt /bin/bash -c  "echo $zrfstb" >> /etc/fstab
        
        # configurazioni varie per installazione
        cp -rp /etc/pacman.conf /mnt/etc/

        if [ -d "/etc/zsh" ]; then
           rm -rf /mnt/etc/zsh
        else
           echo ""
        fi
        rm -rf /mnt/etc/os-release

    }

    packages(){
        
        # Installazione pacchetti
        # !!!!!!!!!! provare a far installare tutto da pacstrap!!!
        arch-chroot /mnt /bin/bash -c "pacman -Sy $core $base $de $generic --noconfirm"
        arch-chroot /mnt /bin/bash -c "systemctl enable $services"

        # finalizzazione
        cp -rp /etc/core/.zshrc /mnt/home/$user_name/
        mkdir -p /mnt/home/$user_name/.config/autostart
        cp -rp /home/liveuser/.config/autostart/startx.desktop /mnt/home/$user_name/.config/autostart/
        cp -rp /home/liveuser/Templates /mnt/home/$user_name/
        

        # copia pacman.conf con richiesta firme
        cp -rp /etc/core/pacman.conf /mnt/etc/

    }


    systemd-boot(){

        arch-chroot /mnt /bin/bash -c "pacman -Sy efibootmgr --noconfirm"
        arch-chroot /mnt /bin/bash -c "bootctl --path=/boot install && echo 'default arch-*' >> /boot/loader/loader.conf && echo 'timeout 5' >> /boot/loader/loader.conf && echo 'title Core Linux' > /boot/loader/entries/arch.conf && echo 'linux /vmlinuz-linux' >> /boot/loader/entries/arch.conf && echo 'initrd /initramfs-linux.img' >> /boot/loader/entries/arch.conf && echo 'options root=/dev/'$partition_device'2 rootflags=subvol=@ rw quiet loglevel=3 rd.system.show_status=auto rd.udev.log_level=3' >> /boot/loader/entries/arch.conf"
    }

    grub-legacy(){

        # Configura GRUB
        arch-chroot /mnt /bin/bash -c  "pacman -Syyu --noconfirm && pacman -S grub --noconfirm && grub-install --target=i386-pc /dev/$partition_device && grub-mkconfig -o /boot/grub/grub.cfg"
    }



if [ "$partition_efi" = "true" ]; then 
    uefi
else
    legacy
fi
        
base

if [ "$partition_efi" = "true" ]; then 
    systemd-boot
else
    grub-legacy
fi        

packages


