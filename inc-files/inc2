#!/usr/bin/bash

# Leggi il file JSON in una variabile
json=$(cat "/tmp/config.json")

# Crea le variabili leggendo dal JSON
partition_device=$(echo "$json" | jq -r '.partition.device')
partition_efi=$(echo "$json" | jq -r '.partition.efi')
locale_locale=$(echo "$json" | jq -r '.locale.locale[0]')
locale_keymap=$(echo "$json" | jq -r '.locale.keymap')
locale_timezone=$(echo "$json" | jq -r '.locale.timezone')
networking_hostname=$(echo "$json" | jq -r '.networking.hostname')
user_name=$(echo "$json" | jq -r '.users[0].name')
real_name=$(echo "$json" | jq -r '.users[0].rname')
user_password=$(echo "$json" | jq -r '.users[0].userpass')
user_shell=$(echo "$json" | jq -r '.users[0].shell')
root_password=$(echo "$json" | jq -r '.rootpass')
key=$(echo "$json" | jq -r '.users[0].key')
decrypted=$(echo "$user_password" | openssl enc -d -aes256 -base64 -k "$key")
decrypted2=$(echo "$root_password" | openssl enc -d -aes256 -base64 -k "$key")
zr=$(echo "$json" | jq -r '.partition.zram')
zram="${zr}G"
core="core-base architalia-fonts core-gtk-theme core-gnome-backgrounds core-icons-theme core-keyring core-extensions-base core-terminal-nord-theme"
de="xorg gnome-shell gnome-control-center gnome-keyring gnome-terminal gnome-text-editor gnome-shell-extensions xdg-user-dirs-gtk xdg-user-dirs gvfs gdm nautilus"
base="networkmanager wpa_supplicant wireless_tools netctl net-tools iw cups alsa-utils pipewire-pulse mtools dosfstools exfatprogs fuse firewalld acpi cronie git wget reflector bluez bluez-utils"
generic="gnome-shell-extension-desktop-icons-ng firefox yay timeshift extension-manager evince eog gparted gsmartcontrol mpv gnome-calculator gnome-clocks gnome-calendar htop gnome-system-monitor vim nano"
services="gdm NetworkManager firewalld bluetooth cronie reflector cups"




    base2(){
        
        ln -sf /usr/share/zoneinfo/$locale_timezone /etc/localtime 
        hwclock --systohc
        echo "$locale_locale" > /etc/locale.gen
        locale-gen
        echo "$locale_locale" >> /etc/locale.conf
        echo "KEYMAP=$locale_keymap" >> /etc/vconsole.conf  
        echo "$networking_hostname" > /etc/hostname
        echo "127.0.0.1 localhost" >> /etc/hosts 
        echo "::1       localhost" >> /etc/hosts
        echo root:$decrypted2 | chpasswd
        pacman -Sy $user_shell --noconfirm
        useradd -m -s /bin/$user_shell $user_name
        echo $user_name:$decrypted | chpasswd
        usermod -aG wheel $user_name
        usermod -c "$real_name" $user_name
        echo "$user_name ALL=(ALL:ALL) ALL" >> /etc/sudoers.d/$user_name
        

        if [ -d "/etc/zsh" ]; then
           rm -rf /etc/zsh
        else
           echo ""
        fi
        rm -rf /etc/os-release


    }

    packages(){
        
        # Installazione pacchetti
        pacman -Sy $core $base $de $generic --noconfirm
        systemctl enable $services

        # finalizzazione
        cp -rp /home/inc-files/.zshrc /home/$user_name/
        mkdir -p /home/$user_name/.config/autostart
        cp -rp /home/inc-files/startx.desktop /home/$user_name/.config/autostart/
        cp -rp /home/inc-files/Templates /home/$user_name/
        

        # copia pacman.conf con richiesta firme
        cp -rp /home/inc-files/pacman.conf /etc/

    }


    systemd-boot(){

        pacman -Sy efibootmgr --noconfirm
        bootctl --path=/boot install && echo 'default arch-*' >> /boot/loader/loader.conf && echo 'timeout 5' >> /boot/loader/loader.conf && echo 'title Core Linux' > /boot/loader/entries/arch.conf && echo 'linux /vmlinuz-linux' >> /boot/loader/entries/arch.conf && echo 'initrd /initramfs-linux.img' >> /boot/loader/entries/arch.conf && echo 'options root=/dev/'$partition_device'2 rootflags=subvol=@ rw quiet loglevel=3 rd.system.show_status=auto rd.udev.log_level=3' >> /boot/loader/entries/arch.conf
    }

    grub-legacy(){

        # Configura GRUB
        pacman -Syyu --noconfirm && pacman -S grub --noconfirm && grub-install --target=i386-pc /dev/$partition_device && grub-mkconfig -o /boot/grub/grub.cfg
    }

    
    zram(){
        #zram udev rules 
        echo "zram" > /etc/modules-load.d/zram.conf
        echo 'ACTION=="add", KERNEL=="zram0", ATTR{comp_algorithm}="zstd", ATTR{disksize}="'$zram'", RUN="/usr/bin/mkswap -U clear /dev/%k" , TAG+="systemd"' > /etc/udev/rules.d/99-zram.rules
        echo "/dev/zram0 none swap defaults,pri=100 0 0 " >> /etc/fstab

    }

base2

if [ "$partition_efi" = "true" ]; then 
    systemd-boot
else
    grub-legacy
fi        

packages
zram
rm -rf /home/inc-files
